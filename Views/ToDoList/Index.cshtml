@model IEnumerable<SatışProject.Entities.ToDoItem>
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery Antiforgery

@{
    ViewData["Title"] = "Yapılacaklar Listem";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    var tokens = Antiforgery.GetAndStoreTokens(ViewContext.HttpContext);

}

<!-- CSRF token’ı meta etiketinde tek başına -->
<meta name="request-verification-token" content="@tokens.RequestToken" />

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>@ViewData["Title"]</h2>
        <a asp-action="Create"
           asp-route-employeeId="@ViewBag.EmployeeId"
           class="btn btn-primary">Yeni Görev Ekle</a>
    </div>

    @if (!Model.Any())
    {
        <div id="no-tasks-message" class="alert alert-info" role="alert">
            Henüz yapılacak bir göreviniz bulunmuyor. Yeni bir görev eklemek için "Yeni Görev Ekle" butonunu kullanabilirsiniz.
        </div>
    }
    else
    {
        <ul id="todo-list" class="list-group">
            @foreach (var item in Model)
            {
                <li id="todoItem_@item.ToDoItemID"
                    class="list-group-item d-flex justify-content-between align-items-center @(item.IsCompleted ? "list-group-item-success" : "")">

                    <div>
                        <input type="checkbox"
                               id="todo-checkbox-@item.ToDoItemID"
                               class="form-check-input me-2"
                               data-id="@item.ToDoItemID"
                        @(item.IsCompleted ? "checked" : "") />
                        <label for="todo-checkbox-@item.ToDoItemID"
                               class="mb-0 @(item.IsCompleted ? "text-decoration-line-through" : "")">
                            <strong>@item.Description</strong>
                            @if (item.DueDate.HasValue)
                            {
                                <small class="text-muted ms-2">Bitiş Tarihi: @item.DueDate.Value.ToShortDateString()</small>
                            }
                            <br />
                            <small class="text-muted">Oluşturulma Tarihi: @item.CreatedDate.ToShortDateString()</small>
                        </label>
                    </div>

                    <div>
                        <a asp-action="Edit"
                           asp-route-id="@item.ToDoItemID"
                           class="btn btn-sm btn-warning">Düzenle</a>

                        <button type="button"
                                class="btn btn-sm btn-danger ms-1 delete-button"
                                data-id="@item.ToDoItemID">
                            Sil
                        </button>
                    </div>
                </li>
            }
        </ul>
    }
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {

            const csrf = document.querySelector('meta[name="request-verification-token"]').content;

            /*---------------  TAMAMLANMA DURUMU  ---------------*/
            document.querySelectorAll('.form-check-input').forEach(cb => {
                cb.addEventListener('change', () => {
                    const id = cb.dataset.id;

                    fetch(`/ToDoList/ToggleComplete/${id}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': csrf,
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                        .then(r => r.json())
                        .then(data => {
                            if (!data.success) return Swal.fire('Hata!', 'Durum güncellenemedi.', 'error');

                            const li = cb.closest('li');
                            li.classList.toggle('list-group-item-success', data.isCompleted);
                            li.querySelector('label').classList.toggle('text-decoration-line-through', data.isCompleted);
                        })
                        .catch(err => {
                            console.error(err);
                            Swal.fire('Hata!', 'Durum güncellenirken sorun oluştu.', 'error');
                        });
                });
            });

            /*---------------  SİLME  ---------------*/
            document.querySelectorAll('.delete-button').forEach(btn => {
                btn.addEventListener('click', () => {
                    const id = btn.dataset.id;
                    const li = document.getElementById(`todoItem_${id}`);

                    Swal.fire({
                        title: 'Emin misiniz?',
                        text: 'Bu görevi geri alamazsınız!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Evet, Sil',
                        cancelButtonText: 'İptal'
                    }).then(result => {
                        if (!result.isConfirmed) return;

                        fetch(`/ToDoList/Delete/${id}`, {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': csrf,
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        })
                            .then(r => r.json())
                            .then(data => {
                                if (!data.success) return Swal.fire('Hata!', data.message, 'error');

                                li.remove();
                                Swal.fire('Silindi!', data.message, 'success');
                                updateNoTasksMessage();
                            })
                            .catch(err => {
                                console.error(err);
                                Swal.fire('Hata!', 'Silme işlemi sırasında sorun oluştu.', 'error');
                            });
                    });
                });
            });

            /*---------------  BOS LISTE MESAJI  ---------------*/
            function updateNoTasksMessage() {
                const list = document.getElementById('todo-list');
                const msg = document.getElementById('no-tasks-message');

                if (list && list.children.length === 0) {
                    if (!msg) {
                        const div = document.createElement('div');
                        div.id = 'no-tasks-message';
                        div.className = 'alert alert-info';
                        div.role = 'alert';
                        div.textContent = 'Henüz yapılacak bir göreviniz bulunmuyor. Yeni bir görev eklemek için "Yeni Görev Ekle" butonunu kullanabilirsiniz.';
                        document.querySelector('.container.mt-4').appendChild(div);
                    }
                } else if (msg) {
                    msg.remove();
                }
            }
        });
    </script>
}
