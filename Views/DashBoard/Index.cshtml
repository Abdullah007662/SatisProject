@model SatışProject.Models.AdminDashboardViewModel
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery Antiforgery

@{
    ViewData["Title"] = "Kullanıcı Dashboard";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    // CSRF token'ı view'da erişilebilir hale getir
    var tokens = Antiforgery.GetAndStoreTokens(ViewContext.HttpContext);
}

<meta name="request-verification-token" content="@tokens.RequestToken" />

<div class="container-fluid">

    <div class="row mb-4">
        <div class="col">
            <h3 class="welcome-message">
                Hoşgeldiniz <span id="userName" style="font-weight: bold;">@Model.UserFirstName @Model.UserLastName</span>
            </h3>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 col-lg-3">
            <div class="stat-card">
                <div class="stat-icon bg-light-primary">
                    <i class="fas fa-shopping-bag"></i>
                </div>
                <div class="stat-info">
                    <div class="stat-value">@Model.TotalOrders.ToString("N0")</div>
                    <div class="stat-label">Toplam Kendi Siparişlerim</div>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3">
            <div class="stat-card">
                <div class="stat-icon bg-light-success">
                    <i class="fas fa-money-check-alt"></i>
                </div>
                <div class="stat-info">
                    <div class="stat-value">@Model.TotalRevenue.ToString("N2")₺</div>
                    <div class="stat-label">Kendi Satış Gelirim</div>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3">
            <div class="stat-card">
                <div class="stat-icon bg-light-warning">
                    <i class="fas fa-users"></i>
                </div>
                <div class="stat-info">
                    <div class="stat-value">@Model.TotalCustomers.ToString("N0")</div>
                    <div class="stat-label">Sistemdeki Toplam Müşteri</div>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3">
            <div class="stat-card">
                <div class="stat-icon bg-light-danger">
                    <i class="fas fa-box"></i>
                </div>
                <div class="stat-info">
                    <div class="stat-value">@Model.TotalProducts.ToString("N0")</div>
                    <div class="stat-label">Sistemdeki Toplam Ürün</div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Kendi Satışlarımın İstatistikleri</h5>
                </div>
                <div class="card-body">
                    <canvas id="salesChart" height="300"></canvas>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Kendi En Çok Satan Ürünlerim</h5>
                </div>
                <div class="card-body">
                    <canvas id="productsChart" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Son Yaptığım Satışlar</h5>
                    <a href="/Sale/Index" class="btn btn-sm btn-primary">Tümünü Gör</a>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover datatable">
                            <thead>
                                <tr>
                                    <th>Sipariş No</th>
                                    <th>Müşteri</th>
                                    <th>Tarih</th>
                                    <th>Toplam</th>
                                    <th>Durum</th>
                                    <th>İşlemler</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var order in Model.RecentOrders)
                                {
                                    <tr>
                                        <td>#@order.SaleNumber</td>
                                        <td>@(order.Customer?.ContactName ?? order.Customer?.CompanyName)</td>
                                        <td>@order.SaleDate.ToString("dd.MM.yyyy")</td>
                                        <td>@order.GrandTotal.ToString("N2")₺</td>
                                        <td><span class="badge @(order.Status == SaleStatus.Completed ? "bg-success" : order.Status == SaleStatus.Pending ? "bg-warning text-dark" : order.Status == SaleStatus.Cancelled ? "bg-danger" : "bg-primary")">@order.Status.ToString()</span></td>
                                        <td>
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                    İşlemler
                                                </button>
                                                <ul class="dropdown-menu">
                                                    <li><a class="dropdown-item" href="#"><i class="fas fa-eye me-2"></i> Görüntüle</a></li>
                                                    <li><a class="dropdown-item" href="#"><i class="fas fa-edit me-2"></i> Düzenle</a></li>
                                                    <li><a class="dropdown-item" href="#"><i class="fas fa-print me-2"></i> Yazdır</a></li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Yapılacaklar Listem</h5>
                    @* employeeId'nin ViewBag'den geldiğinden emin olun *@
                    @if (ViewBag.EmployeeId != null)
                    {
                        <a asp-controller="ToDoList" asp-action="Create" asp-route-employeeId="@ViewBag.EmployeeId" class="btn btn-sm btn-primary">Yeni Görev Ekle</a>
                    }
                    else
                    {
                        @* Eğer EmployeeId yoksa butonu devre dışı bırakabilir veya gizleyebilirsiniz *@
                        <button class="btn btn-sm btn-primary" disabled title="Çalışan kaydınız bulunmadığı için yeni görev ekleyemezsiniz.">Yeni Görev Ekle</button>
                    }
                </div>
                <div class="card-body">
                    @if (!Model.ToDoItems.Any())
                    {
                        <div id="no-tasks-message" class="alert alert-info" role="alert">
                            Henüz yapılacak bir göreviniz bulunmuyor. Yeni bir görev eklemek için "Yeni Görev Ekle" butonunu kullanabilirsiniz.
                        </div>
                    }
                    else
                    {
                        <ul id="todo-list" class="list-group">
                            @foreach (var item in Model.ToDoItems)
                            {
                                <li id="todoItem_@item.ToDoItemID"
                                    class="list-group-item d-flex justify-content-between align-items-center @(item.IsCompleted ? "list-group-item-success" : "")">

                                    <div>
                                        <input type="checkbox"
                                               id="todo-checkbox-@item.ToDoItemID"
                                               class="form-check-input me-2"
                                               data-id="@item.ToDoItemID"
                                        @(item.IsCompleted ? "checked" : "") />
                                        <label for="todo-checkbox-@item.ToDoItemID"
                                               class="mb-0 @(item.IsCompleted ? "text-decoration-line-through" : "")">
                                            <strong>@item.Description</strong>
                                            @if (item.DueDate.HasValue)
                                            {
                                                <small class="text-muted ms-2">Bitiş Tarihi: @item.DueDate.Value.ToShortDateString()</small>
                                            }
                                            <br />
                                            <small class="text-muted">Oluşturulma Tarihi: @item.CreatedDate.ToShortDateString()</small>
                                        </label>
                                    </div>

                                    <div>
                                        <a asp-controller="ToDoList" asp-action="Edit" asp-route-id="@item.ToDoItemID" class="btn btn-sm btn-warning">Düzenle</a>
                                        <button type="button"
                                                class="btn btn-sm btn-danger ms-1 delete-button"
                                                data-id="@item.ToDoItemID">
                                            Sil
                                        </button>
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {

            const csrf = document.querySelector('meta[name="request-verification-token"]').content;

            /*--------------- HOŞGELDİNİZ MESAJI RENK DEĞİŞTİRME ---------------*/
            const userNameSpan = document.getElementById('userName');
            if (userNameSpan) {
                const colors = ['rgb(255, 0, 0)', 'rgb(0, 255, 0)', 'rgb(0, 0, 255)'];
                let colorIndex = 0;

                function changeColor() {
                    userNameSpan.style.color = colors[colorIndex];
                    colorIndex = (colorIndex + 1) % colors.length;
                }
                setInterval(changeColor, 1500);
            }

            /*--------------- YAPILACAKLAR LİSTESİ - TAMAMLANMA DURUMU ---------------*/
            document.querySelectorAll('#todo-list .form-check-input').forEach(cb => {
                cb.addEventListener('change', () => {
                    const id = cb.dataset.id;

                    fetch(`/ToDoList/ToggleComplete/${id}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': csrf,
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                        .then(response => {
                            if (!response.ok) {
                                return response.text().then(text => { throw new Error(text) });
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (!data.success) {
                                Swal.fire('Hata!', data.message || 'Durum güncellenemedi.', 'error');
                                cb.checked = !cb.checked; // Hata durumunda checkbox'ı geri al
                                return;
                            }

                            const li = cb.closest('li');
                            li.classList.toggle('list-group-item-success', data.isCompleted);
                            li.querySelector('label').classList.toggle('text-decoration-line-through', data.isCompleted);
                        })
                        .catch(err => {
                            console.error('Toggle Complete Hatası:', err);
                            Swal.fire('Hata!', 'Durum güncellenirken beklenmeyen bir sorun oluştu.', 'error');
                            cb.checked = !cb.checked; // Hata durumunda checkbox'ı geri al
                        });
                });
            });

            /*--------------- YAPILACAKLAR LİSTESİ - SİLME İŞLEMİ ---------------*/
            document.querySelectorAll('#todo-list .delete-button').forEach(btn => {
                btn.addEventListener('click', () => {
                    const id = btn.dataset.id;
                    const li = document.getElementById(`todoItem_${id}`);

                    Swal.fire({
                        title: 'Emin misiniz?',
                        text: 'Bu görevi geri alamazsınız!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Evet, Sil!',
                        cancelButtonText: 'İptal Et'
                    }).then(result => {
                        if (!result.isConfirmed) return;

                        fetch(`/ToDoList/Delete/${id}`, {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': csrf,
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        })
                            .then(response => {
                                if (!response.ok) {
                                    return response.text().then(text => { throw new Error(text) });
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (!data.success) {
                                    Swal.fire('Hata!', data.message || 'Görev silinirken bir sorun oluştu.', 'error');
                                    return;
                                }

                                li.remove(); // Listeden öğeyi kaldır
                                Swal.fire('Silindi!', data.message, 'success');
                                updateNoTasksMessage(); // Boş liste mesajını güncelle
                            })
                            .catch(err => {
                                console.error('Delete Hatası:', err);
                                Swal.fire('Hata!', 'Silme işlemi sırasında beklenmeyen bir sorun oluştu.', 'error');
                            });
                    });
                });
            });

            /*--------------- BOŞ LİSTE MESAJI YÖNETİMİ ---------------*/
            function updateNoTasksMessage() {
                const todoList = document.getElementById('todo-list');
                let noTasksMessage = document.getElementById('no-tasks-message');
                const container = document.querySelector('.card-body'); // ToDoList card'ının body'si

                if (todoList && todoList.children.length === 0) {
                    if (!noTasksMessage) {
                        noTasksMessage = document.createElement('div');
                        noTasksMessage.id = 'no-tasks-message';
                        noTasksMessage.className = 'alert alert-info';
                        noTasksMessage.setAttribute('role', 'alert');
                        noTasksMessage.textContent = 'Henüz yapılacak bir göreviniz bulunmuyor. Yeni bir görev eklemek için "Yeni Görev Ekle" butonunu kullanabilirsiniz.';
                        container.appendChild(noTasksMessage);
                    }
                } else if (noTasksMessage) {
                    noTasksMessage.remove();
                }
            }

            // Sayfa yüklendiğinde mesajın doğru durumda olmasını sağla
            updateNoTasksMessage();

            /*--------------- CHART.JS GRAFİKLERİ ---------------*/
            // Kendi Satış İstatistikleri Grafiği
            var salesCtx = document.getElementById('salesChart').getContext('2d');
            var salesChart = new Chart(salesCtx, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SalesStatistics.Select(s => s.Item1).ToList())),
                    datasets: [{
                        label: 'Satışlar',
                        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SalesStatistics.Select(s => s.Item2).ToList())),
                        backgroundColor: 'rgba(93, 135, 255, 0.1)',
                        borderColor: '#5D87FF',
                        borderWidth: 2,
                        tension: 0.3,
                        pointBackgroundColor: '#ffffff',
                        pointBorderColor: '#5D87FF',
                        pointBorderWidth: 2,
                        pointRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                label: function (context) {
                                    return context.dataset.label + ': ' + context.parsed.y.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function (value) {
                                    return value.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });
                                }
                            }
                        }
                    }
                }
            });

            // Kendi En Çok Satan Ürünleri Grafiği
            var productsCtx = document.getElementById('productsChart').getContext('2d');
            var productsChart = new Chart(productsCtx, {
                type: 'doughnut',
                data: {
                    labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopSellingProducts.Keys.ToList())),
                    datasets: [{
                        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopSellingProducts.Values.ToList())),
                        backgroundColor: ['#5D87FF', '#13DEB9', '#FFAE1F', '#FA896B', '#49BEFF'],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                boxWidth: 12,
                                padding: 15
                            }
                        }
                    },
                    cutout: '70%'
                }
            });

            // Tab geçişi yapıldığında Chart.js grafiklerini yeniden boyutlandırmak için
            $('a[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
                if (e.target.id === 'some-tab-id-that-contains-chart') {
                    salesChart.resize();
                    productsChart.resize();
                }
            });
        });
    </script>
}